const VercelKvDatabase = require('../database/vercelKvDatabase');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function askQuestion(question) {
    return new Promise((resolve) => {
        rl.question(question, resolve);
    });
}

async function initAdmin() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (Vercel KV)');
    console.log('================================================\n');

    try {
        const db = new VercelKvDatabase();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω—ã
        const users = await db.getAllUsers();
        const admins = users.filter(user => user.role === 'admin');
        
        if (admins.length > 0) {
            console.log('‚ö†Ô∏è  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç:');
            admins.forEach(admin => {
                console.log(`   - ${admin.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (ID: ${admin.telegram_id})`);
            });
            
            const continueSetup = await askQuestion('\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞? (y/n): ');
            if (continueSetup.toLowerCase() !== 'y') {
                console.log('–û—Ç–º–µ–Ω–µ–Ω–æ.');
                process.exit(0);
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        const telegramId = await askQuestion('–í–≤–µ–¥–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ');
        const username = await askQuestion('–í–≤–µ–¥–∏—Ç–µ username (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ');
        const firstName = await askQuestion('–í–≤–µ–¥–∏—Ç–µ –∏–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ');
        const lastName = await askQuestion('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ');

        if (!telegramId) {
            console.log('‚ùå Telegram ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!');
            process.exit(1);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID
        const existingUser = await db.getUserByTelegramId(telegramId);
        if (existingUser) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
            process.exit(1);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const adminId = await db.addUser({
            telegram_id: parseInt(telegramId),
            username: username || null,
            first_name: firstName || null,
            last_name: lastName || null,
            role: 'admin'
        });

        console.log('\n‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
        console.log(`   ID –≤ –±–∞–∑–µ: ${adminId}`);
        console.log(`   Telegram ID: ${telegramId}`);
        console.log(`   Username: ${username || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   –ò–º—è: ${firstName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`   –§–∞–º–∏–ª–∏—è: ${lastName || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
        
        console.log('\nüì± –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Mini App!');
        console.log('üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ Vercel —Å Vercel KV –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error.message);
        process.exit(1);
    } finally {
        rl.close();
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    initAdmin();
}

module.exports = { initAdmin };
